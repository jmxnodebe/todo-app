{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","todos","map","todo","className","key","type","value","text","id","onChange","e","setUpdate","target","onClick","deleteTodo","App","state","isComplete","handleInput","bind","addTodo","this","setState","Date","now","preventDefault","newTodo","newTodos","filteredTodos","filter","onSubmit","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6TA4BeA,MAzBf,SAAmBC,GACjB,IACMC,EADQD,EAAME,MACIC,KAAI,SAACC,GAC3B,OACE,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC9B,2BACE,2BACEC,KAAK,OACLC,MAAOJ,EAAKK,KACZC,GAAIN,EAAKE,IACTK,SAAU,SAACC,GACTZ,EAAMa,UAAUD,EAAEE,OAAON,MAAOJ,EAAKE,QAGzC,4BAAQS,QAAS,kBAAMf,EAAMgB,WAAWZ,EAAKE,MAAMI,GAAG,gBACnD,IADH,eAQR,OAAO,6BAAMT,ICkEAgB,E,kDAtFb,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IACDkB,MAAQ,CACXhB,MAAO,GACPE,KAAM,CACJK,KAAM,GACNH,IAAK,GACLa,YAAY,IAGhB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKL,WAAa,EAAKA,WAAWK,KAAhB,gBAClB,EAAKR,UAAY,EAAKA,UAAUQ,KAAf,gBAbA,E,wDAePT,GACVW,KAAKC,SAAS,CACZpB,KAAM,CACJK,KAAMG,EAAEE,OAAON,MACfF,IAAKmB,KAAKC,MACVP,YAAY,O,8BAIVP,GACNA,EAAEe,iBACF,IAAMC,EAAUL,KAAKL,MAAMd,KAC3B,GAAqB,KAAjBwB,EAAQnB,KAAa,CACvB,IAAMoB,EAAQ,sBAAON,KAAKL,MAAMhB,OAAlB,CAAyB0B,IACvCL,KAAKC,SAAS,CACZtB,MAAO2B,EACPzB,KAAM,CACJK,KAAM,GACNH,IAAK,GACLa,YAAY,Q,iCAMTb,GACT,IAAMwB,EAAgBP,KAAKL,MAAMhB,MAAM6B,QAAO,SAAC3B,GAAD,OAAUA,EAAKE,MAAQA,KACrEiB,KAAKC,SAAS,CACZtB,MAAO4B,M,gCAIDrB,EAAMH,GACd,IAAMJ,EAAQqB,KAAKL,MAAMhB,MACzBA,EAAMC,KAAI,SAACC,GACLA,EAAKE,MAAQA,IACfF,EAAKK,KAAOA,MAGhBc,KAAKC,SAAS,CACZtB,MAAOA,M,+BAKT,OACE,yBAAKG,UAAU,WACb,gCACE,0BAAMK,GAAG,WAAWsB,SAAUT,KAAKD,SACjC,2BACEZ,GAAG,YACHH,KAAK,OACL0B,YAAY,mBACZzB,MAAOe,KAAKL,MAAMd,KAAKK,KACvBE,SAAUY,KAAKH,cAEjB,4BAAQV,GAAG,YAAYH,KAAK,UAC1B,mCAIN,kBAAC,EAAD,CACEL,MAAOqB,KAAKL,MAAMhB,MAClBc,WAAYO,KAAKP,WACjBH,UAAWU,KAAKV,iB,GAhFRqB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.113a9d7e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ListItems.css\";\r\n\r\nfunction ListItems(props) {\r\n  const todos = props.todos;\r\n  const listItems = todos.map((todo) => {\r\n    return (\r\n      <div className=\"list\" key={todo.key}>\r\n        <p>\r\n          <input\r\n            type=\"text\"\r\n            value={todo.text}\r\n            id={todo.key}\r\n            onChange={(e) => {\r\n              props.setUpdate(e.target.value, todo.key);\r\n            }}\r\n          />\r\n          <button onClick={() => props.deleteTodo(todo.key)} id=\"deleteButton\">\r\n            {\" \"}\r\n            âœ˜\r\n          </button>\r\n        </p>\r\n      </div>\r\n    );\r\n  });\r\n  return <div>{listItems}</div>;\r\n}\r\n\r\nexport default ListItems;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ListItems from \"./ListItems\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [],\n      todo: {\n        text: \"\",\n        key: \"\",\n        isComplete: false,\n      },\n    };\n    this.handleInput = this.handleInput.bind(this);\n    this.addTodo = this.addTodo.bind(this);\n    this.deleteTodo = this.deleteTodo.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n  }\n  handleInput(e) {\n    this.setState({\n      todo: {\n        text: e.target.value,\n        key: Date.now(),\n        isComplete: false,\n      },\n    });\n  }\n  addTodo(e) {\n    e.preventDefault();\n    const newTodo = this.state.todo;\n    if (newTodo.text !== \"\") {\n      const newTodos = [...this.state.todos, newTodo];\n      this.setState({\n        todos: newTodos,\n        todo: {\n          text: \"\",\n          key: \"\",\n          isComplete: false,\n        },\n      });\n    }\n  }\n\n  deleteTodo(key) {\n    const filteredTodos = this.state.todos.filter((todo) => todo.key !== key);\n    this.setState({\n      todos: filteredTodos,\n    });\n  }\n\n  setUpdate(text, key) {\n    const todos = this.state.todos;\n    todos.map((todo) => {\n      if (todo.key === key) {\n        todo.text = text;\n      }\n    });\n    this.setState({\n      todos: todos,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"todoApp\">\n        <header>\n          <form id=\"todoForm\" onSubmit={this.addTodo}>\n            <input\n              id=\"inputTodo\"\n              type=\"text\"\n              placeholder=\"Enter a new Todo\"\n              value={this.state.todo.text}\n              onChange={this.handleInput}\n            />\n            <button id=\"addButton\" type=\"submit\">\n              <b>+</b>\n            </button>\n          </form>\n        </header>\n        <ListItems\n          todos={this.state.todos}\n          deleteTodo={this.deleteTodo}\n          setUpdate={this.setUpdate}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}